// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Project\Go\src\stockbit4\code\movie\type.go

// Package mock_movie is a generated GoMock package.
package mock_movie

import (
	reflect "reflect"
	movie "stockbit4/code/movie"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetMovieByExactName mocks base method.
func (m *MockRepository) GetMovieByExactName(MovieName string) (movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByExactName", MovieName)
	ret0, _ := ret[0].(movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByExactName indicates an expected call of GetMovieByExactName.
func (mr *MockRepositoryMockRecorder) GetMovieByExactName(MovieName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByExactName", reflect.TypeOf((*MockRepository)(nil).GetMovieByExactName), MovieName)
}

// InsertMovieData mocks base method.
func (m *MockRepository) InsertMovieData(movieDetail movie.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMovieData", movieDetail)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMovieData indicates an expected call of InsertMovieData.
func (mr *MockRepositoryMockRecorder) InsertMovieData(movieDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMovieData", reflect.TypeOf((*MockRepository)(nil).InsertMovieData), movieDetail)
}

// IsAlreadyExist mocks base method.
func (m *MockRepository) IsAlreadyExist(ImdbID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyExist", ImdbID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlreadyExist indicates an expected call of IsAlreadyExist.
func (mr *MockRepositoryMockRecorder) IsAlreadyExist(ImdbID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExist", reflect.TypeOf((*MockRepository)(nil).IsAlreadyExist), ImdbID)
}

// LogSearchData mocks base method.
func (m *MockRepository) LogSearchData(searchData movie.SearchData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogSearchData", searchData)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogSearchData indicates an expected call of LogSearchData.
func (mr *MockRepositoryMockRecorder) LogSearchData(searchData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogSearchData", reflect.TypeOf((*MockRepository)(nil).LogSearchData), searchData)
}

// MockRestRepository is a mock of RestRepository interface.
type MockRestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRestRepositoryMockRecorder
}

// MockRestRepositoryMockRecorder is the mock recorder for MockRestRepository.
type MockRestRepositoryMockRecorder struct {
	mock *MockRestRepository
}

// NewMockRestRepository creates a new mock instance.
func NewMockRestRepository(ctrl *gomock.Controller) *MockRestRepository {
	mock := &MockRestRepository{ctrl: ctrl}
	mock.recorder = &MockRestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestRepository) EXPECT() *MockRestRepositoryMockRecorder {
	return m.recorder
}

// GetMovieData mocks base method.
func (m *MockRestRepository) GetMovieData(requestParam movie.SearchData) ([]movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieData", requestParam)
	ret0, _ := ret[0].([]movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieData indicates an expected call of GetMovieData.
func (mr *MockRestRepositoryMockRecorder) GetMovieData(requestParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieData", reflect.TypeOf((*MockRestRepository)(nil).GetMovieData), requestParam)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetMovieData mocks base method.
func (m *MockUsecase) GetMovieData(searchData movie.SearchData) ([]movie.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieData", searchData)
	ret0, _ := ret[0].([]movie.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieData indicates an expected call of GetMovieData.
func (mr *MockUsecaseMockRecorder) GetMovieData(searchData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieData", reflect.TypeOf((*MockUsecase)(nil).GetMovieData), searchData)
}
