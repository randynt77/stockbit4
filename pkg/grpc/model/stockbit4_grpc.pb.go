// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Stockbit4Client is the client API for Stockbit4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Stockbit4Client interface {
	GetMovieData(ctx context.Context, in *GetMovieDataRequest, opts ...grpc.CallOption) (*GetMovieDataResponse, error)
}

type stockbit4Client struct {
	cc grpc.ClientConnInterface
}

func NewStockbit4Client(cc grpc.ClientConnInterface) Stockbit4Client {
	return &stockbit4Client{cc}
}

func (c *stockbit4Client) GetMovieData(ctx context.Context, in *GetMovieDataRequest, opts ...grpc.CallOption) (*GetMovieDataResponse, error) {
	out := new(GetMovieDataResponse)
	err := c.cc.Invoke(ctx, "/stockbit4.Stockbit4/GetMovieData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Stockbit4Server is the server API for Stockbit4 service.
// All implementations must embed UnimplementedStockbit4Server
// for forward compatibility
type Stockbit4Server interface {
	GetMovieData(context.Context, *GetMovieDataRequest) (*GetMovieDataResponse, error)
	mustEmbedUnimplementedStockbit4Server()
}

// UnimplementedStockbit4Server must be embedded to have forward compatible implementations.
type UnimplementedStockbit4Server struct {
}

func (UnimplementedStockbit4Server) GetMovieData(context.Context, *GetMovieDataRequest) (*GetMovieDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieData not implemented")
}
func (UnimplementedStockbit4Server) mustEmbedUnimplementedStockbit4Server() {}

// UnsafeStockbit4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Stockbit4Server will
// result in compilation errors.
type UnsafeStockbit4Server interface {
	mustEmbedUnimplementedStockbit4Server()
}

func RegisterStockbit4Server(s grpc.ServiceRegistrar, srv Stockbit4Server) {
	s.RegisterService(&Stockbit4_ServiceDesc, srv)
}

func _Stockbit4_GetMovieData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Stockbit4Server).GetMovieData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockbit4.Stockbit4/GetMovieData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Stockbit4Server).GetMovieData(ctx, req.(*GetMovieDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stockbit4_ServiceDesc is the grpc.ServiceDesc for Stockbit4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stockbit4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stockbit4.Stockbit4",
	HandlerType: (*Stockbit4Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieData",
			Handler:    _Stockbit4_GetMovieData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stockbit4.proto",
}
